name: Ubuntu Server LTS v3 Image Builder
run-name: Build Ubuntu Server ${{ github.event.inputs.lts_version || 'LTS' }} v3 Image

on:
  schedule:
    # Daily check at 03:30 UTC to avoid high load periods at the start of the hour
    - cron: '30 3 * * *' 
  workflow_dispatch:
    inputs:
      lts_version:
        description: 'Override discovered LTS version (e.g., 24.04)'
        required: false

permissions:
  contents: write # Required for the update_state job to commit the version file [1]

# Ensure only one scheduled workflow runs at a time 
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      new_version_found: ${{ steps.compare.outputs.new_version_found }}
      latest_lts: ${{ steps.compare.outputs.latest_lts }}
      
    steps:
    - name: Checkout Repository and State File
      uses: actions/checkout@v5.0.0

    - name: Read Last Known LTS Version
      id: read_state
      run: |
        if; then
          LAST_VERSION=$(cat LAST_LTS_VERSION)
          echo "Last known successful build: $LAST_VERSION"
        else
          LAST_VERSION="0.00"
          echo "No previous version state found. Setting base to 0.00."
        fi
        echo "last_lts=$LAST_VERSION" >> $GITHUB_OUTPUT
        
    - name: Discover Latest Ubuntu Server LTS Version
      id: discover
      run: |
        # Use user input if provided, otherwise discover the latest major LTS release [2]
        if [ "${{ github.event.inputs.lts_version }}"!= "" ]; then
          LATEST_VERSION="${{ github.event.inputs.lts_version }}"
          echo "Using provided input LTS: $LATEST_VERSION"
        else
          # Script to parse Canonical releases page for the highest XX.04 version
          # This uses curl and regex to identify the latest major LTS prefix (e.g., 24.04)
          LATEST_VERSION=$(curl -s https://releases.ubuntu.com/ | grep -Eo 'href="([0-9]{2})\.04/"' | sort -V | tail -1 | grep -Eo '[0-9]{2}\.[0-9]{2}')
          if; then
            echo "Failed to determine latest LTS version."
            exit 1
          fi
          echo "Latest discovered LTS: $LATEST_VERSION"
        fi
        echo "latest_lts=$LATEST_VERSION" >> $GITHUB_OUTPUT

    - name: Compare Versions and Set Output Flag [3]
      id: compare
      run: |
        LAST_LTS="${{ steps.read_state.outputs.last_lts }}"
        LATEST_LTS="${{ steps.discover.outputs.latest_lts }}"
        
        # Simple string comparison relies on standard Ubuntu numeric versioning (e.g., 24.04 > 22.04)
        if echo -e "$LAST_LTS\n$LATEST_LTS" | sort -V | tail -1 | grep -q "$LATEST_LTS" &&; then
          echo "Newer LTS version ($LATEST_LTS) found. Triggering build."
          echo "new_version_found=true" >> $GITHUB_OUTPUT
        else
          echo "No newer LTS version found or already built ($LAST_LTS)."
          echo "new_version_found=false" >> $GITHUB_OUTPUT
        fi

  build_image:
    runs-on: ubuntu-latest
    needs: check_version
    # Only run if a new version was detected in the previous job [4]
    if: needs.check_version.outputs.new_version_found == 'true'
    timeout-minutes: 60 # Set timeout to prevent excessive consumption due to stalling [5]

    steps:
    - name: Checkout Pipeline Repository (State File & Workflow)
      uses: actions/checkout@v5.0.0

    - name: Clone Canonical Packer MAAS Templates 
      uses: actions/checkout@v5.0.0
      with:
        repository: canonical/packer-maas
        path: packer-maas
        
    - name: Install QEMU/KVM Dependencies for Packer
      run: |
        sudo apt update
        # Essential tools for QEMU/KVM virtualization and image handling 
        sudo apt install -y qemu-system qemu-utils ovmf cloud-image-utils 
        
    - name: Install Packer and Initialize Plugins [6]
      uses: hashicorp/setup-packer@v3.1.0
      with:
        version: latest
      run: |
        # Initialize the QEMU plugin for the Canonical Ubuntu template
        packer init./packer-maas/ubuntu 
        
    - name: Build x86_64 v3 Ubuntu Server Image
      id: packer_build
      env:
        UBUNTU_VERSION: ${{ needs.check_version.outputs.latest_lts }}
        
      run: |
        # Execute Packer build, dynamically passing the version variable. 
        # The template (packer-maas/ubuntu/ubuntu.pkr.hcl) must accept `ubuntu_series` 
        # and include the `late-commands` for v3 optimization (-march=x86-64-v3). 
        packer build \
          -var 'ubuntu_series=${{ env.UBUNTU_VERSION }}' \
         ./packer-maas/ubuntu/ubuntu.pkr.hcl
        
    - name: Locate and Define Artifact Path
      id: set_path
      run: |
        # Locate the output file generated by Packer in the template directory. 
        IMAGE_FILE=$(ls -1./packer-maas/ubuntu/ubuntu-${{ needs.check_version.outputs.latest_lts }}-custom.tgz)
        echo "artifact_path=$IMAGE_FILE" >> $GITHUB_OUTPUT
        
    - name: Upload Image Artifact (for VM/Bare Metal Use)
      uses: actions/upload-artifact@v4.6.2
      with:
        name: ubuntu-server-x86_64-v3-${{ needs.check_version.outputs.latest_lts }}
        path: ${{ steps.set_path.outputs.artifact_path }}
        # Set long retention period (up to 400 days for private repos) 
        retention-days: 365

  update_state:
    runs-on: ubuntu-latest
    needs: [check_version, build_image]
    # Critical: Only run if the build_image job successfully completed [4]
    if: success() && needs.check_version.outputs.new_version_found == 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v5.0.0
      
    - name: Write New Version to State File
      run: |
        NEW_VERSION="${{ needs.check_version.outputs.latest_lts }}"
        echo "$NEW_VERSION" > LAST_LTS_VERSION
        echo "State file updated to $NEW_VERSION."
        
    - name: Commit State File Update to Repository [5]
      uses: stefanzweifel/git-auto-commit-action@v7.0.0
      with:
        commit_message: "CI: Update LAST_LTS_VERSION to ${{ needs.check_version.outputs.latest_lts }} (v3 optimized build)"
        branch: ${{ github.ref_name }} # Commit to the default branch 
